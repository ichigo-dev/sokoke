//------------------------------------------------------------------------------
/// # Sokoke Router
//------------------------------------------------------------------------------

mod route;
mod path;

pub use route::Route;
pub use path::Path;

use std::future::Future;

use hyper::{ Body, Request, Response };


//------------------------------------------------------------------------------
/// Handler
//------------------------------------------------------------------------------
pub type Handler = fn(Request<Body>) -> dyn Future<Output = Response<Body>>;


//------------------------------------------------------------------------------
/// Router
//------------------------------------------------------------------------------
pub struct Router
{
    routes: Vec<Route>,
}

impl Router
{
    //--------------------------------------------------------------------------
    /// Create a new router.
    //--------------------------------------------------------------------------
    pub fn new() -> Self
    {
        Self { routes: Vec::new() }
    }

    //--------------------------------------------------------------------------
    /// Add a route to the router.
    //--------------------------------------------------------------------------
    pub fn add( &mut self, route: Route ) -> &mut Self
    {
        self.routes.push(route);
        self
    }
}
